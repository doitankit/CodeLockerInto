onFilesSelected(event: any): void {
  const files: File[] = Array.from(event.target.files);

  // Keep your file properties
  this.files = files.map(file => ({
    file,
    name: file.name,
    size: file.size,
    type: file.type,
    status: 'pending'
  }));

  // Start sequential upload
  this.uploadSequentially(0);
}

private uploadSequentially(index: number): void {
  if (index >= this.files.length) {
    console.log("All files processed");
    return;
  }

  const fileData = this.files[index];
  fileData.status = 'uploading';

  // First create SAS token
  this.createSasToken(fileData.file).subscribe({
    next: (sasResponse) => {
      // Then send file to virus scan blob
      this.vorusscanblob(fileData.file, sasResponse).subscribe({
        next: (res) => {
          fileData.status = 'success';
          console.log(`${fileData.name} uploaded successfully`, res);
          this.uploadSequentially(index + 1); // move to next file
        },
        error: (err) => {
          fileData.status = 'error';
          console.error(`${fileData.name} failed to upload`, err);
          this.uploadSequentially(index + 1); // still continue with next file
        }
      });
    },
    error: (err) => {
      fileData.status = 'error';
      console.error(`SAS token failed for ${fileData.name}`, err);
      this.uploadSequentially(index + 1); // continue next
    }
  });
}




fileSelection(event: any): void {
  console.log("working");

  this.isFileSizeMoreThan4Mb = false;

  const files: FileList = event?.target?.files;
  if (!files || files.length === 0) return;

  this.selectedFiles = Array.from(files);

  // Build display list
  this.displayFiles = this.selectedFiles.map(file => ({
    name: file.name,
    type: file.type || 'Unknown',
    size: file.size >= 1048576
      ? (file.size / 1048576).toFixed(2) + ' MB'
      : (file.size / 1024).toFixed(2) + ' KB',
    status: 'Waiting for upload',
  }));

  // Calculate total size
  this.totalSize = this.selectedFiles.reduce((sum, file) => sum + file.size, 0);
  console.log(this.totalSize, "lets see");

  if (this.totalSize / 1048576 >= 4) {
    this.isFileSizeMoreThan4Mb = true;
    this.showFileList = false;
  } else {
    this.showFileList = true;
    this.showUploadOpt = false;
  }

  // ðŸ”‘ Emit each file sequentially so other logic works
  this.selectedFiles.forEach(file => {
    this.documentFiles.emit(file);
  });
} 



onDrop(event: any): void {
  if (!this.showFileUploader) return;

  event.preventDefault();
  event.stopPropagation();

  this.isFileSizeMoreThan4Mb = false;
  this.selectedFiles = [];

  const files: FileList = event.dataTransfer?.files;
  if (!files || files.length === 0) return;

  this.selectedFiles = Array.from(files);

  // Build display list for UI
  this.displayFiles = this.selectedFiles.map(file => ({
    name: file.name,
    type: file.type || 'Unknown',
    size: file.size >= 1048576
      ? (file.size / 1048576).toFixed(2) + ' MB'
      : (file.size / 1024).toFixed(2) + ' KB',
    status: 'Waiting for upload',
  }));

  // Calculate total size
  this.totalSize = this.selectedFiles.reduce((sum, file) => sum + file.size, 0);
  console.log(this.totalSize, "lets see (drop)");

  if (this.totalSize / 1048576 >= 4) {
    this.isFileSizeMoreThan4Mb = true;
    this.showFileList = false;
  } else {
    this.showFileList = true;
    this.showUploadOpt = false;
  }

  // ðŸ”‘ Emit each file sequentially
  this.selectedFiles.forEach(file => {
    this.documentFiles.emit(file);
  });

  this.isFileUploadingStarted = true;
} 
